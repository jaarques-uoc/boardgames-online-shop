{"version":3,"sources":["common/components/Navbar.js","routes/products/components/GridItem.js","routes/products/components/GridRow.js","routes/products/components/Grid.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","_ref","Object","objectDestructuringEmpty","react_default","a","createElement","className","href","id","GridItem","src","type","GridRow","GridItem_GridItem","Grid","Fragment","GridRow_GridRow","App","Navbar_Navbar","Grid_Grid","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAEMA,EAAS,SAAAC,GAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAD,GACXG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+CACXH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAID,UAAU,oCAAtB,0BACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCAAiCE,GAAG,qBAC/CL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oDACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWC,KAAK,KAA7B,YAEJJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWC,KAAK,KAA7B,SAEJJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWC,KAAK,KAA7B,sBCZdE,EAAW,SAAAT,GAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAD,GACbG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKK,IAAI,8FACTP,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAASL,UAAU,mBAAhC,iBCJFM,EAAU,SAAAZ,GAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAD,GACZG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAA6BH,EAAAC,EAAAC,cAACQ,EAAD,OAC5CV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAA6BH,EAAAC,EAAAC,cAACQ,EAAD,OAC5CV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAA6BH,EAAAC,EAAAC,cAACQ,EAAD,OAC5CV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAA6BH,EAAAC,EAAAC,cAACQ,EAAD,OAC5CV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAA6BH,EAAAC,EAAAC,cAACQ,EAAD,OAC5CV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAA6BH,EAAAC,EAAAC,cAACQ,EAAD,SCP9CC,EAAO,SAAAd,GAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAD,GACTG,EAAAC,EAAAC,cAACF,EAAAC,EAAMW,SAAP,KACIZ,EAAAC,EAAAC,cAACW,EAAD,MACAb,EAAAC,EAAAC,cAACW,EAAD,QCUOC,mLATP,OACId,EAAAC,EAAAC,cAACF,EAAAC,EAAMW,SAAP,KACIZ,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACc,EAAD,cALEC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.14a57dee.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navbar = ({}) =>\n    <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n        <a href=\"/\" className=\"navbar-brand d-flex w-50 mr-auto\">Boardgames online shop</a>\n        <div className=\"navbar-collapse collapse w-100\" id=\"collapsingNavbar3\">\n            <ul className=\"nav navbar-nav ml-auto w-100 justify-content-end\">\n                <li className=\"nav-item\">\n                    <a className=\"nav-link\" href=\"#\">Profile</a>\n                </li>\n                <li className=\"nav-item\">\n                    <a className=\"nav-link\" href=\"#\">Cart</a>\n                </li>\n                <li className=\"nav-item\">\n                    <a className=\"nav-link\" href=\"#\">List of users</a>\n                </li>\n            </ul>\n        </div>\n    </nav>;\n\nexport {Navbar};","import React from 'react';\n\nconst GridItem = ({}) =>\n    <div className=\"grid-item\">\n        <img src=\"https://static.cardmarket.com/img/548dd39417c935651fbd98c3ee6d5951/items/1/WAR/372131.jpg\"/>\n        <div>Item Name</div>\n        <div>3 â‚¬</div>\n        <button type=\"button\" className=\"btn btn-primary\">Add to cart</button>\n    </div>;\n\nexport {GridItem};","import React from 'react';\nimport {GridItem} from \"./GridItem\";\n\nconst GridRow = ({}) =>\n    <div className=\"row grid-row\">\n        <div className=\"col-6 col-md-2 text-center\"><GridItem/></div>\n        <div className=\"col-6 col-md-2 text-center\"><GridItem/></div>\n        <div className=\"col-6 col-md-2 text-center\"><GridItem/></div>\n        <div className=\"col-6 col-md-2 text-center\"><GridItem/></div>\n        <div className=\"col-6 col-md-2 text-center\"><GridItem/></div>\n        <div className=\"col-6 col-md-2 text-center\"><GridItem/></div>\n    </div>;\n\nexport {GridRow};","import React from 'react';\nimport {GridRow} from \"./GridRow\";\n\nconst Grid = ({}) =>\n    <React.Fragment>\n        <GridRow/>\n        <GridRow/>\n    </React.Fragment>;\n\nexport {Grid};","import React, {Component} from 'react';\nimport './App.css';\nimport {Navbar} from \"./common/components/Navbar\";\nimport {Grid} from \"./routes/products/components/Grid\";\n\nclass App extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                <Navbar/>\n                <Grid/>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}